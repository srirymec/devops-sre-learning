Docker File:

ADD	Add local or remote files and directories.
ARG	Use build-time variables.
CMD	Specify default commands.
COPY	Copy files and directories.
ENTRYPOINT	Specify default executable.
ENV	Set environment variables
EXPOSE	Describe which ports your application is listening on
FROM	Create a new build stage from a base image
RUN	Execute build commands.
WORKDIR	Specify/Change working directory.
USER	Set user and group ID.

Docker Commands:

Docker ps
Docker run
Docker images
Docker build
Docker tag
Docker pull/push
Docker exec

Docker build:

docker build [OPTIONS] [PATH|URL]
[PATH|URL]: 
Specifies the build context. This can be a local directory (using the current directory . as a shortcut) or a URL to a Git repository.
[OPTIONS]
-t : tag
-f: specify docker file
--build-arg: pass build time variables

Using Default Dockerfile name	Using Custom Dockerfile name	Passing build time arguments
Dockerfile:	MyDockerfile:	Dockerfile:
FROM python:3.11-slim	FROM python:3.11-slim	ARG VERSION=1.0.0 (Default value)
COPY app.py /app/app.py	COPY app.py /app/app.py	FROM centos
WORKDIR /app	WORKDIR /app	CMD echo "Version is $VERSION"
CMD ["python", "app.py"]	CMD ["python", "app.py"]	

app.py

docker build -t my-python-app
                        --build-arg VERSION=1.2.3  .

app.py

docker build -t my-python-app .	
	app.py

docker build -t my-python-app
                        -f MyDockerfile .

Docker run:

docker run [OPTIONS] IMAGE [COMMAND] [ARG...]

IMAGE: Name (and optionally tag) of the image (e.g., nginx:latest)

[COMMAND] / [ARG]: Optional override for CMD or arguments in the Dockerfile

[OPTIONS]:
-d	Run container in detached mode (in background)	docker run -d -p 8080:80 nginx
-it	Allocate interactive terminal (useful for shells)	docker run -it ubuntu bash
--name	Assign a custom name to the container	docker run -d -p 8080:80 --name myNginx nginx
-p	Publish container port to host (e.g., -p 8080:80)	
-v	Mount a volume (e.g., -v /host:/container)	docker run -v /host/path:/container/path my-image
--env or -e	Set environment variables	docker run -e MY_VAR=123 my-image
--entrypoint	Override the ENTRYPOINT in Dockerfile	If your image has entrypoint as python
ENTRYPOINT['python']

docker run --entrypoint pip my-image install requests

Overrides entrypoint with pip.

Docker Exec:

The docker exec command is used to run a command inside a running container. It's especially useful for debugging or interacting with long-running containers (like web servers, databases, etc.).

docker exec [OPTIONS] CONTAINER COMMAND [ARG...]

CONTAINER: The name or ID of the running container

COMMAND: The command you want to execute inside the container

[OPTIONS]:
-it -> Run interactively
-d -> Run in detached mode
--user -> Run as specific user

Open a shell in a running container	docker exec -it my-container-name /bin/bash
	docker exec -it my-container-name /bin/sh
Check a file inside the container	docker exec my-container-name cat /etc/hosts
Run a script inside the container	docker exec my-container-name python /app/myscript.py
List environment variables	docker exec my-container-name env
Run a command as root (if running as non-root by default)	docker exec -u root -it my-container-name /bin/bash
